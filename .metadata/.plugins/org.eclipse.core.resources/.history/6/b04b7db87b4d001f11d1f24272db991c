package com.bezkoder.spring.jpa.postgresql.service;


	

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Service
public class ExcelService {

	  @Autowired
	    private JdbcTemplate jdbcTemplate;
	  
    private final ObjectMapper objectMapper;

    public ExcelService(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }


    public String convertMultipleExcelFilesToJson(MultipartFile[] files) throws IOException {
        List<Map<String, String>> excelData = new ArrayList<>();

        for (MultipartFile file : files) {
            Workbook workbook = WorkbookFactory.create(file.getInputStream());
            Sheet sheet = workbook.getSheetAt(0);

            Row headerRow = sheet.getRow(0);

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                Map<String, String> rowData = new HashMap<>();

                for (int j = 0; j < row.getLastCellNum(); j++) {
                    Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                    String header = headerRow.getCell(j).getStringCellValue();
                    String cellValue = cell.toString().trim().isEmpty() ? "null" : cell.toString();

                    if (header.equals("Property Address")) {
                        cellValue = cellValue.replace("\"", "");
                    }

                    rowData.put(header, cellValue);
                }

                excelData.add(rowData);
            }
        }

        return objectMapper.writeValueAsString(excelData);
    }

    public void saveJsonData(String jsonData) {
        String sql = "CALL insert_excel_data_from_json(?)";
        jdbcTemplate.update(sql, jsonData);
    }
}


