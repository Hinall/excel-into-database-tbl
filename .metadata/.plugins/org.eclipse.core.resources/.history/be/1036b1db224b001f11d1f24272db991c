package com.bezkoder.spring.jpa.postgresql.service;


	

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Service
public class ExcelService {

    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    @Autowired
    private ObjectMapper objectMapper;


    public JsonNode readExcelFile(MultipartFile file) throws IOException {
        ArrayNode arrayNode = objectMapper.createArrayNode();

        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rowIterator = sheet.iterator();

            // Skip the header row
            if (rowIterator.hasNext()) {
                rowIterator.next();
            }

            while (rowIterator.hasNext()) {
                Row row = rowIterator.next();
                ObjectNode objectNode = objectMapper.createObjectNode();
                for (int i = 0; i < row.getLastCellNum(); i++) {
                    Cell cell = row.getCell(i);
                    if (cell != null) {
                        String columnName = "column" + (i + 1); // Create a generic column name
                        switch (cell.getCellType()) {
                            case STRING:
                                objectNode.put(columnName, cell.getStringCellValue());
                                break;
                            case NUMERIC:
                                objectNode.put(columnName, cell.getNumericCellValue());
                                break;
                            case BOOLEAN:
                                objectNode.put(columnName, cell.getBooleanCellValue());
                                break;
                            default:
                                objectNode.put(columnName, cell.toString());
                        }
                    } else {
                        objectNode.put("column" + (i + 1), ""); // Handle empty cells
                    }
                }
                arrayNode.add(objectNode);
            }
        }
        return arrayNode;
    }

    public void saveExcelData(List<List<String>> data) {
        String sql = "CALL insert_excel_data(?, ?, ?)";
        // Adjust the number of parameters and their order based on your stored procedure

        for (List<String> row : data) {
            if (row.size() >= 3) { // Adjust based on your column count
                jdbcTemplate.update(sql, row.get(0), row.get(1), row.get(2));
            }
        }
    }

    public void saveMultipleExcelData(List<MultipartFile> files) {
        for (MultipartFile file : files) {
            List<List<String>> data = readExcelFile(file);
            saveExcelData(data);
        }
    }
}


